#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ListenTo.Data.LinqToSQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ListenTo")]
	public partial class ListenToDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAct(Act instance);
    partial void UpdateAct(Act instance);
    partial void DeleteAct(Act instance);
    partial void InsertArtist(Artist instance);
    partial void UpdateArtist(Artist instance);
    partial void DeleteArtist(Artist instance);
    partial void InsertVenue(Venue instance);
    partial void UpdateVenue(Venue instance);
    partial void DeleteVenue(Venue instance);
    partial void InsertGig(Gig instance);
    partial void UpdateGig(Gig instance);
    partial void DeleteGig(Gig instance);
    partial void InsertStyle(Style instance);
    partial void UpdateStyle(Style instance);
    partial void DeleteStyle(Style instance);
    partial void InsertTown(Town instance);
    partial void UpdateTown(Town instance);
    partial void DeleteTown(Town instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertSite(Site instance);
    partial void UpdateSite(Site instance);
    partial void DeleteSite(Site instance);
    partial void InsertTrack(Track instance);
    partial void UpdateTrack(Track instance);
    partial void DeleteTrack(Track instance);
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertArticlesTargetSite(ArticlesTargetSite instance);
    partial void UpdateArticlesTargetSite(ArticlesTargetSite instance);
    partial void DeleteArticlesTargetSite(ArticlesTargetSite instance);
    partial void InsertAction(Action instance);
    partial void UpdateAction(Action instance);
    partial void DeleteAction(Action instance);
    partial void InsertActionsArtist(ActionsArtist instance);
    partial void UpdateActionsArtist(ActionsArtist instance);
    partial void DeleteActionsArtist(ActionsArtist instance);
    partial void InsertActionsTargetSite(ActionsTargetSite instance);
    partial void UpdateActionsTargetSite(ActionsTargetSite instance);
    partial void DeleteActionsTargetSite(ActionsTargetSite instance);
    partial void InsertRelationship(Relationship instance);
    partial void UpdateRelationship(Relationship instance);
    partial void DeleteRelationship(Relationship instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUsersPreferredStyle(UsersPreferredStyle instance);
    partial void UpdateUsersPreferredStyle(UsersPreferredStyle instance);
    partial void DeleteUsersPreferredStyle(UsersPreferredStyle instance);
    #endregion
		
		public ListenToDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ListenToDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ListenToDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ListenToDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Act> Acts
		{
			get
			{
				return this.GetTable<Act>();
			}
		}
		
		public System.Data.Linq.Table<Artist> Artists
		{
			get
			{
				return this.GetTable<Artist>();
			}
		}
		
		public System.Data.Linq.Table<Venue> Venues
		{
			get
			{
				return this.GetTable<Venue>();
			}
		}
		
		public System.Data.Linq.Table<Gig> Gigs
		{
			get
			{
				return this.GetTable<Gig>();
			}
		}
		
		public System.Data.Linq.Table<GigAttendee> GigAttendees
		{
			get
			{
				return this.GetTable<GigAttendee>();
			}
		}
		
		public System.Data.Linq.Table<Style> Styles
		{
			get
			{
				return this.GetTable<Style>();
			}
		}
		
		public System.Data.Linq.Table<Town> Towns
		{
			get
			{
				return this.GetTable<Town>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Site> Sites
		{
			get
			{
				return this.GetTable<Site>();
			}
		}
		
		public System.Data.Linq.Table<SiteTown> SiteTowns
		{
			get
			{
				return this.GetTable<SiteTown>();
			}
		}
		
		public System.Data.Linq.Table<Track> Tracks
		{
			get
			{
				return this.GetTable<Track>();
			}
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<ArticlesTargetSite> ArticlesTargetSites
		{
			get
			{
				return this.GetTable<ArticlesTargetSite>();
			}
		}
		
		public System.Data.Linq.Table<Action> Actions
		{
			get
			{
				return this.GetTable<Action>();
			}
		}
		
		public System.Data.Linq.Table<ActionsArtist> ActionsArtists
		{
			get
			{
				return this.GetTable<ActionsArtist>();
			}
		}
		
		public System.Data.Linq.Table<ActionsTargetSite> ActionsTargetSites
		{
			get
			{
				return this.GetTable<ActionsTargetSite>();
			}
		}
		
		public System.Data.Linq.Table<Relationship> Relationships
		{
			get
			{
				return this.GetTable<Relationship>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UsersPreferredStyle> UsersPreferredStyles
		{
			get
			{
				return this.GetTable<UsersPreferredStyle>();
			}
		}
	}
	
	[Table(Name="dbo.Acts")]
	public partial class Act : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _GigID;
		
		private System.Nullable<System.Guid> _ArtistID;
		
		private System.Nullable<System.DateTime> _StageTime;
		
		private string _SetLength;
		
		private string _Thumbnail;
		
		private EntityRef<Artist> _Artist;
		
		private EntityRef<Gig> _Gig;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGigIDChanging(System.Guid value);
    partial void OnGigIDChanged();
    partial void OnArtistIDChanging(System.Nullable<System.Guid> value);
    partial void OnArtistIDChanged();
    partial void OnStageTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStageTimeChanged();
    partial void OnSetLengthChanging(string value);
    partial void OnSetLengthChanged();
    partial void OnThumbnailChanging(string value);
    partial void OnThumbnailChanged();
    #endregion
		
		public Act()
		{
			this._Artist = default(EntityRef<Artist>);
			this._Gig = default(EntityRef<Gig>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_GigID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GigID
		{
			get
			{
				return this._GigID;
			}
			set
			{
				if ((this._GigID != value))
				{
					if (this._Gig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGigIDChanging(value);
					this.SendPropertyChanging();
					this._GigID = value;
					this.SendPropertyChanged("GigID");
					this.OnGigIDChanged();
				}
			}
		}
		
		[Column(Storage="_ArtistID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ArtistID
		{
			get
			{
				return this._ArtistID;
			}
			set
			{
				if ((this._ArtistID != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtistIDChanging(value);
					this.SendPropertyChanging();
					this._ArtistID = value;
					this.SendPropertyChanged("ArtistID");
					this.OnArtistIDChanged();
				}
			}
		}
		
		[Column(Storage="_StageTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StageTime
		{
			get
			{
				return this._StageTime;
			}
			set
			{
				if ((this._StageTime != value))
				{
					this.OnStageTimeChanging(value);
					this.SendPropertyChanging();
					this._StageTime = value;
					this.SendPropertyChanged("StageTime");
					this.OnStageTimeChanged();
				}
			}
		}
		
		[Column(Storage="_SetLength", DbType="Char(100)")]
		public string SetLength
		{
			get
			{
				return this._SetLength;
			}
			set
			{
				if ((this._SetLength != value))
				{
					this.OnSetLengthChanging(value);
					this.SendPropertyChanging();
					this._SetLength = value;
					this.SendPropertyChanged("SetLength");
					this.OnSetLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Thumbnail", DbType="VarChar(50)")]
		public string Thumbnail
		{
			get
			{
				return this._Thumbnail;
			}
			set
			{
				if ((this._Thumbnail != value))
				{
					this.OnThumbnailChanging(value);
					this.SendPropertyChanging();
					this._Thumbnail = value;
					this.SendPropertyChanged("Thumbnail");
					this.OnThumbnailChanged();
				}
			}
		}
		
		[Association(Name="Artist_Act", Storage="_Artist", ThisKey="ArtistID", IsForeignKey=true)]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.Acts.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.Acts.Add(this);
						this._ArtistID = value.ID;
					}
					else
					{
						this._ArtistID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		[Association(Name="Gig_Act", Storage="_Gig", ThisKey="GigID", IsForeignKey=true)]
		public Gig Gig
		{
			get
			{
				return this._Gig.Entity;
			}
			set
			{
				Gig previousValue = this._Gig.Entity;
				if (((previousValue != value) 
							|| (this._Gig.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gig.Entity = null;
						previousValue.Acts.Remove(this);
					}
					this._Gig.Entity = value;
					if ((value != null))
					{
						value.Acts.Add(this);
						this._GigID = value.ID;
					}
					else
					{
						this._GigID = default(System.Guid);
					}
					this.SendPropertyChanged("Gig");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Artists")]
	public partial class Artist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _StyleID;
		
		private System.Nullable<System.Guid> _LocationID;
		
		private System.Guid _UserID;
		
		private string _Profile;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Formed;
		
		private System.Nullable<System.Guid> _LogoImageID;
		
		private string _OfficalWebsiteURL;
		
		private string _EmailAddress;
		
		private string _ProfileAddress;
		
		private System.Guid _TownID;
		
		private EntitySet<Act> _Acts;
		
		private EntitySet<ActionsArtist> _ActionsArtists;
		
		private EntityRef<Town> _Town;
		
		private EntityRef<Image> _Image;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStyleIDChanging(System.Guid value);
    partial void OnStyleIDChanged();
    partial void OnLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnLocationIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnProfileChanging(string value);
    partial void OnProfileChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnFormedChanging(System.Nullable<System.DateTime> value);
    partial void OnFormedChanged();
    partial void OnLogoImageIDChanging(System.Nullable<System.Guid> value);
    partial void OnLogoImageIDChanged();
    partial void OnOfficalWebsiteURLChanging(string value);
    partial void OnOfficalWebsiteURLChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnProfileAddressChanging(string value);
    partial void OnProfileAddressChanged();
    partial void OnTownIDChanging(System.Guid value);
    partial void OnTownIDChanged();
    #endregion
		
		public Artist()
		{
			this._Acts = new EntitySet<Act>(new Action<Act>(this.attach_Acts), new Action<Act>(this.detach_Acts));
			this._ActionsArtists = new EntitySet<ActionsArtist>(new Action<ActionsArtist>(this.attach_ActionsArtists), new Action<ActionsArtist>(this.detach_ActionsArtists));
			this._Town = default(EntityRef<Town>);
			this._Image = default(EntityRef<Image>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_StyleID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StyleID
		{
			get
			{
				return this._StyleID;
			}
			set
			{
				if ((this._StyleID != value))
				{
					this.OnStyleIDChanging(value);
					this.SendPropertyChanging();
					this._StyleID = value;
					this.SendPropertyChanged("StyleID");
					this.OnStyleIDChanged();
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Profile", DbType="VarChar(3000)")]
		public string Profile
		{
			get
			{
				return this._Profile;
			}
			set
			{
				if ((this._Profile != value))
				{
					this.OnProfileChanging(value);
					this.SendPropertyChanging();
					this._Profile = value;
					this.SendPropertyChanged("Profile");
					this.OnProfileChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Formed", DbType="DateTime")]
		public System.Nullable<System.DateTime> Formed
		{
			get
			{
				return this._Formed;
			}
			set
			{
				if ((this._Formed != value))
				{
					this.OnFormedChanging(value);
					this.SendPropertyChanging();
					this._Formed = value;
					this.SendPropertyChanged("Formed");
					this.OnFormedChanged();
				}
			}
		}
		
		[Column(Storage="_LogoImageID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LogoImageID
		{
			get
			{
				return this._LogoImageID;
			}
			set
			{
				if ((this._LogoImageID != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogoImageIDChanging(value);
					this.SendPropertyChanging();
					this._LogoImageID = value;
					this.SendPropertyChanged("LogoImageID");
					this.OnLogoImageIDChanged();
				}
			}
		}
		
		[Column(Storage="_OfficalWebsiteURL", DbType="VarChar(200)")]
		public string OfficalWebsiteURL
		{
			get
			{
				return this._OfficalWebsiteURL;
			}
			set
			{
				if ((this._OfficalWebsiteURL != value))
				{
					this.OnOfficalWebsiteURLChanging(value);
					this.SendPropertyChanging();
					this._OfficalWebsiteURL = value;
					this.SendPropertyChanged("OfficalWebsiteURL");
					this.OnOfficalWebsiteURLChanged();
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="VarChar(200)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_ProfileAddress", DbType="VarChar(50)")]
		public string ProfileAddress
		{
			get
			{
				return this._ProfileAddress;
			}
			set
			{
				if ((this._ProfileAddress != value))
				{
					this.OnProfileAddressChanging(value);
					this.SendPropertyChanging();
					this._ProfileAddress = value;
					this.SendPropertyChanged("ProfileAddress");
					this.OnProfileAddressChanged();
				}
			}
		}
		
		[Column(Storage="_TownID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TownID
		{
			get
			{
				return this._TownID;
			}
			set
			{
				if ((this._TownID != value))
				{
					if (this._Town.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTownIDChanging(value);
					this.SendPropertyChanging();
					this._TownID = value;
					this.SendPropertyChanged("TownID");
					this.OnTownIDChanged();
				}
			}
		}
		
		[Association(Name="Artist_Act", Storage="_Acts", OtherKey="ArtistID")]
		public EntitySet<Act> Acts
		{
			get
			{
				return this._Acts;
			}
			set
			{
				this._Acts.Assign(value);
			}
		}
		
		[Association(Name="Artist_ActionsArtist", Storage="_ActionsArtists", OtherKey="ArtistID")]
		public EntitySet<ActionsArtist> ActionsArtists
		{
			get
			{
				return this._ActionsArtists;
			}
			set
			{
				this._ActionsArtists.Assign(value);
			}
		}
		
		[Association(Name="Town_Artist", Storage="_Town", ThisKey="TownID", IsForeignKey=true)]
		public Town Town
		{
			get
			{
				return this._Town.Entity;
			}
			set
			{
				Town previousValue = this._Town.Entity;
				if (((previousValue != value) 
							|| (this._Town.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Town.Entity = null;
						previousValue.Artists.Remove(this);
					}
					this._Town.Entity = value;
					if ((value != null))
					{
						value.Artists.Add(this);
						this._TownID = value.ID;
					}
					else
					{
						this._TownID = default(System.Guid);
					}
					this.SendPropertyChanged("Town");
				}
			}
		}
		
		[Association(Name="Image_Artist", Storage="_Image", ThisKey="LogoImageID", IsForeignKey=true)]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.Artists.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.Artists.Add(this);
						this._LogoImageID = value.ID;
					}
					else
					{
						this._LogoImageID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Acts(Act entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_Acts(Act entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
		
		private void attach_ActionsArtists(ActionsArtist entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_ActionsArtists(ActionsArtist entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
	}
	
	[Table(Name="dbo.Venues")]
	public partial class Venue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _LocationID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _Capacity;
		
		private string _Website;
		
		private string _Telephone;
		
		private string _Address;
		
		private System.Nullable<System.Guid> _ImageID;
		
		private System.Nullable<System.Guid> _UserID;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Guid _TownID;
		
		private bool _IsDeleted;
		
		private EntitySet<Gig> _Gigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnLocationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnImageIDChanging(System.Nullable<System.Guid> value);
    partial void OnImageIDChanged();
    partial void OnUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserIDChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnTownIDChanging(System.Guid value);
    partial void OnTownIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Venue()
		{
			this._Gigs = new EntitySet<Gig>(new Action<Gig>(this.attach_Gigs), new Action<Gig>(this.detach_Gigs));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[Column(Storage="_Website", DbType="VarChar(50)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[Column(Storage="_Telephone", DbType="VarChar(50)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_ImageID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_TownID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TownID
		{
			get
			{
				return this._TownID;
			}
			set
			{
				if ((this._TownID != value))
				{
					this.OnTownIDChanging(value);
					this.SendPropertyChanging();
					this._TownID = value;
					this.SendPropertyChanged("TownID");
					this.OnTownIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="Venue_Gig", Storage="_Gigs", OtherKey="VenueID")]
		public EntitySet<Gig> Gigs
		{
			get
			{
				return this._Gigs;
			}
			set
			{
				this._Gigs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gigs(Gig entity)
		{
			this.SendPropertyChanging();
			entity.Venue = this;
		}
		
		private void detach_Gigs(Gig entity)
		{
			this.SendPropertyChanging();
			entity.Venue = null;
		}
	}
	
	[Table(Name="dbo.Gigs")]
	public partial class Gig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _VenueID;
		
		private System.DateTime _Date;
		
		private string _Name;
		
		private string _Description;
		
		private string _TicketPrice;
		
		private System.Guid _UserID;
		
		private System.Nullable<System.Guid> _ImageID;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private bool _IsDeleted;
		
		private EntitySet<Act> _Acts;
		
		private EntityRef<Venue> _Venue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnVenueIDChanging(System.Guid value);
    partial void OnVenueIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTicketPriceChanging(string value);
    partial void OnTicketPriceChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnImageIDChanging(System.Nullable<System.Guid> value);
    partial void OnImageIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Gig()
		{
			this._Acts = new EntitySet<Act>(new Action<Act>(this.attach_Acts), new Action<Act>(this.detach_Acts));
			this._Venue = default(EntityRef<Venue>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_VenueID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid VenueID
		{
			get
			{
				return this._VenueID;
			}
			set
			{
				if ((this._VenueID != value))
				{
					if (this._Venue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVenueIDChanging(value);
					this.SendPropertyChanging();
					this._VenueID = value;
					this.SendPropertyChanged("VenueID");
					this.OnVenueIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_TicketPrice", DbType="VarChar(50)")]
		public string TicketPrice
		{
			get
			{
				return this._TicketPrice;
			}
			set
			{
				if ((this._TicketPrice != value))
				{
					this.OnTicketPriceChanging(value);
					this.SendPropertyChanging();
					this._TicketPrice = value;
					this.SendPropertyChanged("TicketPrice");
					this.OnTicketPriceChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ImageID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="Gig_Act", Storage="_Acts", OtherKey="GigID")]
		public EntitySet<Act> Acts
		{
			get
			{
				return this._Acts;
			}
			set
			{
				this._Acts.Assign(value);
			}
		}
		
		[Association(Name="Venue_Gig", Storage="_Venue", ThisKey="VenueID", IsForeignKey=true)]
		public Venue Venue
		{
			get
			{
				return this._Venue.Entity;
			}
			set
			{
				Venue previousValue = this._Venue.Entity;
				if (((previousValue != value) 
							|| (this._Venue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Venue.Entity = null;
						previousValue.Gigs.Remove(this);
					}
					this._Venue.Entity = value;
					if ((value != null))
					{
						value.Gigs.Add(this);
						this._VenueID = value.ID;
					}
					else
					{
						this._VenueID = default(System.Guid);
					}
					this.SendPropertyChanged("Venue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Acts(Act entity)
		{
			this.SendPropertyChanging();
			entity.Gig = this;
		}
		
		private void detach_Acts(Act entity)
		{
			this.SendPropertyChanging();
			entity.Gig = null;
		}
	}
	
	[Table(Name="dbo.GigAttendees")]
	public partial class GigAttendee
	{
		
		private System.Guid _GigID;
		
		private System.Guid _UserID;
		
		public GigAttendee()
		{
		}
		
		[Column(Storage="_GigID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GigID
		{
			get
			{
				return this._GigID;
			}
			set
			{
				if ((this._GigID != value))
				{
					this._GigID = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Styles")]
	public partial class Style : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<UsersPreferredStyle> _UsersPreferredStyles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Style()
		{
			this._UsersPreferredStyles = new EntitySet<UsersPreferredStyle>(new Action<UsersPreferredStyle>(this.attach_UsersPreferredStyles), new Action<UsersPreferredStyle>(this.detach_UsersPreferredStyles));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Style_UsersPreferredStyle", Storage="_UsersPreferredStyles", OtherKey="StyleID")]
		public EntitySet<UsersPreferredStyle> UsersPreferredStyles
		{
			get
			{
				return this._UsersPreferredStyles;
			}
			set
			{
				this._UsersPreferredStyles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersPreferredStyles(UsersPreferredStyle entity)
		{
			this.SendPropertyChanging();
			entity.Style = this;
		}
		
		private void detach_UsersPreferredStyles(UsersPreferredStyle entity)
		{
			this.SendPropertyChanging();
			entity.Style = null;
		}
	}
	
	[Table(Name="dbo.Towns")]
	public partial class Town : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _CountryId;
		
		private System.Nullable<System.DateTime> _Created;
		
		private bool _IsDeleted;
		
		private EntitySet<Artist> _Artists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryIdChanging(System.Guid value);
    partial void OnCountryIdChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Town()
		{
			this._Artists = new EntitySet<Artist>(new Action<Artist>(this.attach_Artists), new Action<Artist>(this.detach_Artists));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CountryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="Town_Artist", Storage="_Artists", OtherKey="TownID")]
		public EntitySet<Artist> Artists
		{
			get
			{
				return this._Artists;
			}
			set
			{
				this._Artists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Artists(Artist entity)
		{
			this.SendPropertyChanging();
			entity.Town = this;
		}
		
		private void detach_Artists(Artist entity)
		{
			this.SendPropertyChanging();
			entity.Town = null;
		}
	}
	
	[Table(Name="dbo.Images")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _height;
		
		private int _width;
		
		private string _description;
		
		private string _filename;
		
		private System.Nullable<System.Guid> _OwnerID;
		
		private string _OwnerType;
		
		private System.Nullable<System.Guid> _ThumbnailID;
		
		private System.Nullable<System.Guid> _OwnerUserID;
		
		private EntitySet<Artist> _Artists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnheightChanging(int value);
    partial void OnheightChanged();
    partial void OnwidthChanging(int value);
    partial void OnwidthChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnfilenameChanging(string value);
    partial void OnfilenameChanged();
    partial void OnOwnerIDChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerIDChanged();
    partial void OnOwnerTypeChanging(string value);
    partial void OnOwnerTypeChanged();
    partial void OnThumbnailIDChanging(System.Nullable<System.Guid> value);
    partial void OnThumbnailIDChanged();
    partial void OnOwnerUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerUserIDChanged();
    #endregion
		
		public Image()
		{
			this._Artists = new EntitySet<Artist>(new Action<Artist>(this.attach_Artists), new Action<Artist>(this.detach_Artists));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_height", DbType="Int NOT NULL")]
		public int height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[Column(Storage="_width", DbType="Int NOT NULL")]
		public int width
		{
			get
			{
				return this._width;
			}
			set
			{
				if ((this._width != value))
				{
					this.OnwidthChanging(value);
					this.SendPropertyChanging();
					this._width = value;
					this.SendPropertyChanged("width");
					this.OnwidthChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="VarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_filename", DbType="VarChar(50)")]
		public string filename
		{
			get
			{
				return this._filename;
			}
			set
			{
				if ((this._filename != value))
				{
					this.OnfilenameChanging(value);
					this.SendPropertyChanging();
					this._filename = value;
					this.SendPropertyChanged("filename");
					this.OnfilenameChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerType", DbType="VarChar(10)")]
		public string OwnerType
		{
			get
			{
				return this._OwnerType;
			}
			set
			{
				if ((this._OwnerType != value))
				{
					this.OnOwnerTypeChanging(value);
					this.SendPropertyChanging();
					this._OwnerType = value;
					this.SendPropertyChanged("OwnerType");
					this.OnOwnerTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ThumbnailID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ThumbnailID
		{
			get
			{
				return this._ThumbnailID;
			}
			set
			{
				if ((this._ThumbnailID != value))
				{
					this.OnThumbnailIDChanging(value);
					this.SendPropertyChanging();
					this._ThumbnailID = value;
					this.SendPropertyChanged("ThumbnailID");
					this.OnThumbnailIDChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerUserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerUserID
		{
			get
			{
				return this._OwnerUserID;
			}
			set
			{
				if ((this._OwnerUserID != value))
				{
					this.OnOwnerUserIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserID = value;
					this.SendPropertyChanged("OwnerUserID");
					this.OnOwnerUserIDChanged();
				}
			}
		}
		
		[Association(Name="Image_Artist", Storage="_Artists", OtherKey="LogoImageID")]
		public EntitySet<Artist> Artists
		{
			get
			{
				return this._Artists;
			}
			set
			{
				this._Artists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Artists(Artist entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_Artists(Artist entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
	}
	
	[Table(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Body;
		
		private System.Guid _UserID;
		
		private string _TargetListenToType;
		
		private System.Guid _TargetListenToTypeID;
		
		private System.DateTime _Created;

        private int _ContentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnTargetListenToTypeChanging(string value);
    partial void OnTargetListenToTypeChanged();
    partial void OnTargetListenToTypeIDChanging(System.Guid value);
    partial void OnTargetListenToTypeIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnContentTypeChanging(int value);
    partial void OnContentTypeChanged();
    #endregion
		
		public Comment()
		{
			OnCreated();
		}

        [Column(Storage = "_ContentType", DbType = "Int NOT NULL")]
        public int ContentType
        {
            get
            {
                return this._ContentType;
            }
            set
            {
                if ((this._ContentType != value))
                {
                    this.OnContentTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ContentType = value;
                    this.SendPropertyChanged("ContentType");
                    this.OnContentTypeChanged();
                }
            }
        }
		

		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_TargetListenToType", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string TargetListenToType
		{
			get
			{
				return this._TargetListenToType;
			}
			set
			{
				if ((this._TargetListenToType != value))
				{
					this.OnTargetListenToTypeChanging(value);
					this.SendPropertyChanging();
					this._TargetListenToType = value;
					this.SendPropertyChanged("TargetListenToType");
					this.OnTargetListenToTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TargetListenToTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TargetListenToTypeID
		{
			get
			{
				return this._TargetListenToTypeID;
			}
			set
			{
				if ((this._TargetListenToTypeID != value))
				{
					this.OnTargetListenToTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TargetListenToTypeID = value;
					this.SendPropertyChanged("TargetListenToTypeID");
					this.OnTargetListenToTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sites")]
	public partial class Site : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _URL;
		
		private System.Nullable<System.Guid> _LocationID;
		
		private string _Description;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.DateTime> _Created;
		
		private EntitySet<ArticlesTargetSite> _ArticlesTargetSites;
		
		private EntitySet<ActionsTargetSite> _ActionsTargetSites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnLocationIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    #endregion
		
		public Site()
		{
			this._ArticlesTargetSites = new EntitySet<ArticlesTargetSite>(new Action<ArticlesTargetSite>(this.attach_ArticlesTargetSites), new Action<ArticlesTargetSite>(this.detach_ArticlesTargetSites));
			this._ActionsTargetSites = new EntitySet<ActionsTargetSite>(new Action<ActionsTargetSite>(this.attach_ActionsTargetSites), new Action<ActionsTargetSite>(this.detach_ActionsTargetSites));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_URL", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Association(Name="Site_ArticlesTargetSite", Storage="_ArticlesTargetSites", OtherKey="SiteID")]
		public EntitySet<ArticlesTargetSite> ArticlesTargetSites
		{
			get
			{
				return this._ArticlesTargetSites;
			}
			set
			{
				this._ArticlesTargetSites.Assign(value);
			}
		}
		
		[Association(Name="Site_ActionsTargetSite", Storage="_ActionsTargetSites", OtherKey="SiteID")]
		public EntitySet<ActionsTargetSite> ActionsTargetSites
		{
			get
			{
				return this._ActionsTargetSites;
			}
			set
			{
				this._ActionsTargetSites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArticlesTargetSites(ArticlesTargetSite entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_ArticlesTargetSites(ArticlesTargetSite entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
		
		private void attach_ActionsTargetSites(ActionsTargetSite entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_ActionsTargetSites(ActionsTargetSite entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
	}
	
	[Table(Name="dbo.SiteTowns")]
	public partial class SiteTown
	{
		
		private System.Guid _SiteId;
		
		private System.Guid _TownId;
		
		public SiteTown()
		{
		}
		
		[Column(Storage="_SiteId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					this._SiteId = value;
				}
			}
		}
		
		[Column(Storage="_TownId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TownId
		{
			get
			{
				return this._TownId;
			}
			set
			{
				if ((this._TownId != value))
				{
					this._TownId = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Tracks")]
	public partial class Track : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _StyleID;
		
		private System.Nullable<System.Guid> _ArtistID;
		
		private string _Title;
		
		private string _Description;
		
		private string _Filename;
		
		private System.Nullable<int> _Length;
		
		private string _Studio;
		
		private string _Producer;
		
		private string _Engineer;
		
		private System.Guid _UserID;
		
		private System.Nullable<System.DateTime> _firstPublished;
		
		private System.Nullable<bool> _IsPublished;
		
		private System.Nullable<bool> _IsSuspended;
		
		private System.Nullable<System.DateTime> _created;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnStyleIDChanging(System.Guid value);
    partial void OnStyleIDChanged();
    partial void OnArtistIDChanging(System.Nullable<System.Guid> value);
    partial void OnArtistIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnLengthChanging(System.Nullable<int> value);
    partial void OnLengthChanged();
    partial void OnStudioChanging(string value);
    partial void OnStudioChanged();
    partial void OnProducerChanging(string value);
    partial void OnProducerChanged();
    partial void OnEngineerChanging(string value);
    partial void OnEngineerChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnfirstPublishedChanging(System.Nullable<System.DateTime> value);
    partial void OnfirstPublishedChanged();
    partial void OnIsPublishedChanging(System.Nullable<bool> value);
    partial void OnIsPublishedChanged();
    partial void OnIsSuspendedChanging(System.Nullable<bool> value);
    partial void OnIsSuspendedChanged();
    partial void OncreatedChanging(System.Nullable<System.DateTime> value);
    partial void OncreatedChanged();
    #endregion
		
		public Track()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_StyleID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StyleID
		{
			get
			{
				return this._StyleID;
			}
			set
			{
				if ((this._StyleID != value))
				{
					this.OnStyleIDChanging(value);
					this.SendPropertyChanging();
					this._StyleID = value;
					this.SendPropertyChanged("StyleID");
					this.OnStyleIDChanged();
				}
			}
		}
		
		[Column(Storage="_ArtistID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ArtistID
		{
			get
			{
				return this._ArtistID;
			}
			set
			{
				if ((this._ArtistID != value))
				{
					this.OnArtistIDChanging(value);
					this.SendPropertyChanging();
					this._ArtistID = value;
					this.SendPropertyChanged("ArtistID");
					this.OnArtistIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(3000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Filename", DbType="VarChar(200)")]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Int")]
		public System.Nullable<int> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Studio", DbType="VarChar(50)")]
		public string Studio
		{
			get
			{
				return this._Studio;
			}
			set
			{
				if ((this._Studio != value))
				{
					this.OnStudioChanging(value);
					this.SendPropertyChanging();
					this._Studio = value;
					this.SendPropertyChanged("Studio");
					this.OnStudioChanged();
				}
			}
		}
		
		[Column(Storage="_Producer", DbType="VarChar(50)")]
		public string Producer
		{
			get
			{
				return this._Producer;
			}
			set
			{
				if ((this._Producer != value))
				{
					this.OnProducerChanging(value);
					this.SendPropertyChanging();
					this._Producer = value;
					this.SendPropertyChanged("Producer");
					this.OnProducerChanged();
				}
			}
		}
		
		[Column(Storage="_Engineer", DbType="VarChar(50)")]
		public string Engineer
		{
			get
			{
				return this._Engineer;
			}
			set
			{
				if ((this._Engineer != value))
				{
					this.OnEngineerChanging(value);
					this.SendPropertyChanging();
					this._Engineer = value;
					this.SendPropertyChanged("Engineer");
					this.OnEngineerChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_firstPublished", DbType="DateTime")]
		public System.Nullable<System.DateTime> firstPublished
		{
			get
			{
				return this._firstPublished;
			}
			set
			{
				if ((this._firstPublished != value))
				{
					this.OnfirstPublishedChanging(value);
					this.SendPropertyChanging();
					this._firstPublished = value;
					this.SendPropertyChanged("firstPublished");
					this.OnfirstPublishedChanged();
				}
			}
		}
		
		[Column(Storage="_IsPublished", DbType="Bit")]
		public System.Nullable<bool> IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}
		
		[Column(Storage="_IsSuspended", DbType="Bit")]
		public System.Nullable<bool> IsSuspended
		{
			get
			{
				return this._IsSuspended;
			}
			set
			{
				if ((this._IsSuspended != value))
				{
					this.OnIsSuspendedChanging(value);
					this.SendPropertyChanging();
					this._IsSuspended = value;
					this.SendPropertyChanged("IsSuspended");
					this.OnIsSuspendedChanged();
				}
			}
		}
		
		[Column(Storage="_created", DbType="DateTime")]
		public System.Nullable<System.DateTime> created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _UserID;
		
		private string _Name;
		
		private string _Description;
		
		private string _Body;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _PublishDate;
		
		private System.Nullable<System.DateTime> _ExpiryDate;
		
		private System.Nullable<System.Guid> _LocationID;
		
		private System.Nullable<bool> _IsLocationSpecific;
		
		private System.Nullable<System.Guid> _ImageID;
		
		private System.Nullable<bool> _IsPublished;
		
		private System.Nullable<bool> _IsSuspended;

        private bool _IsDeleted;
		
		private string _ResourceURL;
		
		private EntitySet<ArticlesTargetSite> _ArticlesTargetSites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishDateChanged();
    partial void OnExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryDateChanged();
    partial void OnLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnLocationIDChanged();
    partial void OnIsLocationSpecificChanging(System.Nullable<bool> value);
    partial void OnIsLocationSpecificChanged();
    partial void OnImageIDChanging(System.Nullable<System.Guid> value);
    partial void OnImageIDChanged();
    partial void OnIsPublishedChanging(System.Nullable<bool> value);
    partial void OnIsPublishedChanged();
    partial void OnIsSuspendedChanging(System.Nullable<bool> value);
    partial void OnIsSuspendedChanged();
    partial void OnResourceURLChanging(string value);
    partial void OnResourceURLChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Article()
		{
			this._ArticlesTargetSites = new EntitySet<ArticlesTargetSite>(new Action<ArticlesTargetSite>(this.attach_ArticlesTargetSites), new Action<ArticlesTargetSite>(this.detach_ArticlesTargetSites));
			OnCreated();
		}

        [Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL")]
        public bool IsDeleted
        {
            get
            {
                return this._IsDeleted;
            }
            set
            {
                if ((this._IsDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._IsDeleted = value;
                    this.SendPropertyChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="VarChar(6000) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_PublishDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}
		
		[Column(Storage="_ExpiryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpiryDate
		{
			get
			{
				return this._ExpiryDate;
			}
			set
			{
				if ((this._ExpiryDate != value))
				{
					this.OnExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiryDate = value;
					this.SendPropertyChanged("ExpiryDate");
					this.OnExpiryDateChanged();
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsLocationSpecific", DbType="Bit")]
		public System.Nullable<bool> IsLocationSpecific
		{
			get
			{
				return this._IsLocationSpecific;
			}
			set
			{
				if ((this._IsLocationSpecific != value))
				{
					this.OnIsLocationSpecificChanging(value);
					this.SendPropertyChanging();
					this._IsLocationSpecific = value;
					this.SendPropertyChanged("IsLocationSpecific");
					this.OnIsLocationSpecificChanged();
				}
			}
		}
		
		[Column(Storage="_ImageID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsPublished", DbType="Bit")]
		public System.Nullable<bool> IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}
		
		[Column(Storage="_IsSuspended", DbType="Bit")]
		public System.Nullable<bool> IsSuspended
		{
			get
			{
				return this._IsSuspended;
			}
			set
			{
				if ((this._IsSuspended != value))
				{
					this.OnIsSuspendedChanging(value);
					this.SendPropertyChanging();
					this._IsSuspended = value;
					this.SendPropertyChanged("IsSuspended");
					this.OnIsSuspendedChanged();
				}
			}
		}
		
		[Column(Storage="_ResourceURL", DbType="VarChar(6000)")]
		public string ResourceURL
		{
			get
			{
				return this._ResourceURL;
			}
			set
			{
				if ((this._ResourceURL != value))
				{
					this.OnResourceURLChanging(value);
					this.SendPropertyChanging();
					this._ResourceURL = value;
					this.SendPropertyChanged("ResourceURL");
					this.OnResourceURLChanged();
				}
			}
		}
		
		[Association(Name="Article_ArticlesTargetSite", Storage="_ArticlesTargetSites", OtherKey="ArticleID")]
		public EntitySet<ArticlesTargetSite> ArticlesTargetSites
		{
			get
			{
				return this._ArticlesTargetSites;
			}
			set
			{
				this._ArticlesTargetSites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArticlesTargetSites(ArticlesTargetSite entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_ArticlesTargetSites(ArticlesTargetSite entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}
	
	[Table(Name="dbo.ArticlesTargetSites")]
	public partial class ArticlesTargetSite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ArticleID;
		
		private System.Guid _SiteID;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleIDChanging(System.Guid value);
    partial void OnArticleIDChanged();
    partial void OnSiteIDChanging(System.Guid value);
    partial void OnSiteIDChanged();
    #endregion
		
		public ArticlesTargetSite()
		{
			this._Article = default(EntityRef<Article>);
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[Column(Storage="_ArticleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}
		
		[Column(Storage="_SiteID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[Association(Name="Article_ArticlesTargetSite", Storage="_Article", ThisKey="ArticleID", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.ArticlesTargetSites.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.ArticlesTargetSites.Add(this);
						this._ArticleID = value.ID;
					}
					else
					{
						this._ArticleID = default(System.Guid);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[Association(Name="Site_ArticlesTargetSite", Storage="_Site", ThisKey="SiteID", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.ArticlesTargetSites.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.ArticlesTargetSites.Add(this);
						this._SiteID = value.ID;
					}
					else
					{
						this._SiteID = default(System.Guid);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Actions")]
	public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _ActionType;
		
		private int _ContentType;
		
		private System.Guid _ContentID;
		
		private System.Nullable<int> _PropertyType;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private System.Guid _OwnerID;
		
		private System.DateTime _Created;
		
		private EntitySet<ActionsArtist> _ActionsArtists;
		
		private EntitySet<ActionsTargetSite> _ActionsTargetSites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnActionTypeChanging(int value);
    partial void OnActionTypeChanged();
    partial void OnContentTypeChanging(int value);
    partial void OnContentTypeChanged();
    partial void OnContentIDChanging(System.Guid value);
    partial void OnContentIDChanged();
    partial void OnPropertyTypeChanging(System.Nullable<int> value);
    partial void OnPropertyTypeChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    partial void OnOwnerIDChanging(System.Guid value);
    partial void OnOwnerIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public Action()
		{
			this._ActionsArtists = new EntitySet<ActionsArtist>(new Action<ActionsArtist>(this.attach_ActionsArtists), new Action<ActionsArtist>(this.detach_ActionsArtists));
			this._ActionsTargetSites = new EntitySet<ActionsTargetSite>(new Action<ActionsTargetSite>(this.attach_ActionsTargetSites), new Action<ActionsTargetSite>(this.detach_ActionsTargetSites));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionType", DbType="Int NOT NULL")]
		public int ActionType
		{
			get
			{
				return this._ActionType;
			}
			set
			{
				if ((this._ActionType != value))
				{
					this.OnActionTypeChanging(value);
					this.SendPropertyChanging();
					this._ActionType = value;
					this.SendPropertyChanged("ActionType");
					this.OnActionTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ContentType", DbType="Int NOT NULL")]
		public int ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ContentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					this.OnContentIDChanging(value);
					this.SendPropertyChanging();
					this._ContentID = value;
					this.SendPropertyChanged("ContentID");
					this.OnContentIDChanged();
				}
			}
		}
		
		[Column(Storage="_PropertyType", DbType="Int")]
		public System.Nullable<int> PropertyType
		{
			get
			{
				return this._PropertyType;
			}
			set
			{
				if ((this._PropertyType != value))
				{
					this.OnPropertyTypeChanging(value);
					this.SendPropertyChanging();
					this._PropertyType = value;
					this.SendPropertyChanged("PropertyType");
					this.OnPropertyTypeChanged();
				}
			}
		}
		
		[Column(Storage="_OldValue", DbType="VarChar(600)")]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[Column(Storage="_NewValue", DbType="VarChar(600)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Association(Name="Action_ActionsArtist", Storage="_ActionsArtists", OtherKey="ActionID")]
		public EntitySet<ActionsArtist> ActionsArtists
		{
			get
			{
				return this._ActionsArtists;
			}
			set
			{
				this._ActionsArtists.Assign(value);
			}
		}
		
		[Association(Name="Action_ActionsTargetSite", Storage="_ActionsTargetSites", OtherKey="ActionID")]
		public EntitySet<ActionsTargetSite> ActionsTargetSites
		{
			get
			{
				return this._ActionsTargetSites;
			}
			set
			{
				this._ActionsTargetSites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActionsArtists(ActionsArtist entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_ActionsArtists(ActionsArtist entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
		
		private void attach_ActionsTargetSites(ActionsTargetSite entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_ActionsTargetSites(ActionsTargetSite entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
	}
	
	[Table(Name="dbo.ActionsArtists")]
	public partial class ActionsArtist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActionID;
		
		private System.Guid _ArtistID;
		
		private EntityRef<Action> _Action;
		
		private EntityRef<Artist> _Artist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionIDChanging(System.Guid value);
    partial void OnActionIDChanged();
    partial void OnArtistIDChanging(System.Guid value);
    partial void OnArtistIDChanged();
    #endregion
		
		public ActionsArtist()
		{
			this._Action = default(EntityRef<Action>);
			this._Artist = default(EntityRef<Artist>);
			OnCreated();
		}
		
		[Column(Storage="_ActionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[Column(Storage="_ArtistID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ArtistID
		{
			get
			{
				return this._ArtistID;
			}
			set
			{
				if ((this._ArtistID != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtistIDChanging(value);
					this.SendPropertyChanging();
					this._ArtistID = value;
					this.SendPropertyChanged("ArtistID");
					this.OnArtistIDChanged();
				}
			}
		}
		
		[Association(Name="Action_ActionsArtist", Storage="_Action", ThisKey="ActionID", IsForeignKey=true)]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.ActionsArtists.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.ActionsArtists.Add(this);
						this._ActionID = value.ID;
					}
					else
					{
						this._ActionID = default(System.Guid);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[Association(Name="Artist_ActionsArtist", Storage="_Artist", ThisKey="ArtistID", IsForeignKey=true)]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.ActionsArtists.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.ActionsArtists.Add(this);
						this._ArtistID = value.ID;
					}
					else
					{
						this._ArtistID = default(System.Guid);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ActionsTargetSites")]
	public partial class ActionsTargetSite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActionID;
		
		private System.Guid _SiteID;
		
		private EntityRef<Action> _Action;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionIDChanging(System.Guid value);
    partial void OnActionIDChanged();
    partial void OnSiteIDChanging(System.Guid value);
    partial void OnSiteIDChanged();
    #endregion
		
		public ActionsTargetSite()
		{
			this._Action = default(EntityRef<Action>);
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[Column(Storage="_ActionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[Column(Storage="_SiteID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[Association(Name="Action_ActionsTargetSite", Storage="_Action", ThisKey="ActionID", IsForeignKey=true)]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.ActionsTargetSites.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.ActionsTargetSites.Add(this);
						this._ActionID = value.ID;
					}
					else
					{
						this._ActionID = default(System.Guid);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[Association(Name="Site_ActionsTargetSite", Storage="_Site", ThisKey="SiteID", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.ActionsTargetSites.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.ActionsTargetSites.Add(this);
						this._SiteID = value.ID;
					}
					else
					{
						this._SiteID = default(System.Guid);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Relationships")]
	public partial class Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _SourceID;
		
		private int _SourceType;
		
		private System.Guid _TargetID;
		
		private int _TargetType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSourceIDChanging(System.Guid value);
    partial void OnSourceIDChanged();
    partial void OnSourceTypeChanging(int value);
    partial void OnSourceTypeChanged();
    partial void OnTargetIDChanging(System.Guid value);
    partial void OnTargetIDChanged();
    partial void OnTargetTypeChanging(int value);
    partial void OnTargetTypeChanged();
    #endregion
		
		public Relationship()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SourceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_SourceType", DbType="Int NOT NULL")]
		public int SourceType
		{
			get
			{
				return this._SourceType;
			}
			set
			{
				if ((this._SourceType != value))
				{
					this.OnSourceTypeChanging(value);
					this.SendPropertyChanging();
					this._SourceType = value;
					this.SendPropertyChanged("SourceType");
					this.OnSourceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TargetID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TargetID
		{
			get
			{
				return this._TargetID;
			}
			set
			{
				if ((this._TargetID != value))
				{
					this.OnTargetIDChanging(value);
					this.SendPropertyChanging();
					this._TargetID = value;
					this.SendPropertyChanged("TargetID");
					this.OnTargetIDChanged();
				}
			}
		}
		
		[Column(Storage="_TargetType", DbType="Int NOT NULL")]
		public int TargetType
		{
			get
			{
				return this._TargetType;
			}
			set
			{
				if ((this._TargetType != value))
				{
					this.OnTargetTypeChanging(value);
					this.SendPropertyChanging();
					this._TargetType = value;
					this.SendPropertyChanged("TargetType");
					this.OnTargetTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Forename;
		
		private string _Surname;
		
		private string _Profile;
		
		private string _EmailAddress;
		
		private System.Nullable<System.Guid> _AvatarImageID;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<bool> _IsUserValidated;
		
		private System.Nullable<System.Guid> _TownID;
		
		private string _AlternativeLocation;
		
		private System.Nullable<bool> _RecievesNewsletter;
		
		private EntitySet<UsersPreferredStyle> _UsersPreferredStyles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnForenameChanging(string value);
    partial void OnForenameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnProfileChanging(string value);
    partial void OnProfileChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnAvatarImageIDChanging(System.Nullable<System.Guid> value);
    partial void OnAvatarImageIDChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnIsUserValidatedChanging(System.Nullable<bool> value);
    partial void OnIsUserValidatedChanged();
    partial void OnTownIDChanging(System.Nullable<System.Guid> value);
    partial void OnTownIDChanged();
    partial void OnAlternativeLocationChanging(string value);
    partial void OnAlternativeLocationChanged();
    partial void OnRecievesNewsletterChanging(System.Nullable<bool> value);
    partial void OnRecievesNewsletterChanged();
    #endregion
		
		public User()
		{
			this._UsersPreferredStyles = new EntitySet<UsersPreferredStyle>(new Action<UsersPreferredStyle>(this.attach_UsersPreferredStyles), new Action<UsersPreferredStyle>(this.detach_UsersPreferredStyles));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Forename", DbType="VarChar(50)")]
		public string Forename
		{
			get
			{
				return this._Forename;
			}
			set
			{
				if ((this._Forename != value))
				{
					this.OnForenameChanging(value);
					this.SendPropertyChanging();
					this._Forename = value;
					this.SendPropertyChanged("Forename");
					this.OnForenameChanged();
				}
			}
		}
		
		[Column(Storage="_Surname", DbType="VarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[Column(Storage="_Profile", DbType="VarChar(1000)")]
		public string Profile
		{
			get
			{
				return this._Profile;
			}
			set
			{
				if ((this._Profile != value))
				{
					this.OnProfileChanging(value);
					this.SendPropertyChanging();
					this._Profile = value;
					this.SendPropertyChanged("Profile");
					this.OnProfileChanged();
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_AvatarImageID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AvatarImageID
		{
			get
			{
				return this._AvatarImageID;
			}
			set
			{
				if ((this._AvatarImageID != value))
				{
					this.OnAvatarImageIDChanging(value);
					this.SendPropertyChanging();
					this._AvatarImageID = value;
					this.SendPropertyChanged("AvatarImageID");
					this.OnAvatarImageIDChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_IsUserValidated", DbType="Bit")]
		public System.Nullable<bool> IsUserValidated
		{
			get
			{
				return this._IsUserValidated;
			}
			set
			{
				if ((this._IsUserValidated != value))
				{
					this.OnIsUserValidatedChanging(value);
					this.SendPropertyChanging();
					this._IsUserValidated = value;
					this.SendPropertyChanged("IsUserValidated");
					this.OnIsUserValidatedChanged();
				}
			}
		}
		
		[Column(Storage="_TownID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TownID
		{
			get
			{
				return this._TownID;
			}
			set
			{
				if ((this._TownID != value))
				{
					this.OnTownIDChanging(value);
					this.SendPropertyChanging();
					this._TownID = value;
					this.SendPropertyChanged("TownID");
					this.OnTownIDChanged();
				}
			}
		}
		
		[Column(Storage="_AlternativeLocation", DbType="VarChar(50)")]
		public string AlternativeLocation
		{
			get
			{
				return this._AlternativeLocation;
			}
			set
			{
				if ((this._AlternativeLocation != value))
				{
					this.OnAlternativeLocationChanging(value);
					this.SendPropertyChanging();
					this._AlternativeLocation = value;
					this.SendPropertyChanged("AlternativeLocation");
					this.OnAlternativeLocationChanged();
				}
			}
		}
		
		[Column(Storage="_RecievesNewsletter", DbType="Bit")]
		public System.Nullable<bool> RecievesNewsletter
		{
			get
			{
				return this._RecievesNewsletter;
			}
			set
			{
				if ((this._RecievesNewsletter != value))
				{
					this.OnRecievesNewsletterChanging(value);
					this.SendPropertyChanging();
					this._RecievesNewsletter = value;
					this.SendPropertyChanged("RecievesNewsletter");
					this.OnRecievesNewsletterChanged();
				}
			}
		}
		
		[Association(Name="User_UsersPreferredStyle", Storage="_UsersPreferredStyles", OtherKey="UserID")]
		public EntitySet<UsersPreferredStyle> UsersPreferredStyles
		{
			get
			{
				return this._UsersPreferredStyles;
			}
			set
			{
				this._UsersPreferredStyles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersPreferredStyles(UsersPreferredStyle entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersPreferredStyles(UsersPreferredStyle entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.UsersPreferredStyles")]
	public partial class UsersPreferredStyle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private System.Guid _StyleID;
		
		private EntityRef<Style> _Style;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnStyleIDChanging(System.Guid value);
    partial void OnStyleIDChanged();
    #endregion
		
		public UsersPreferredStyle()
		{
			this._Style = default(EntityRef<Style>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_StyleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid StyleID
		{
			get
			{
				return this._StyleID;
			}
			set
			{
				if ((this._StyleID != value))
				{
					if (this._Style.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStyleIDChanging(value);
					this.SendPropertyChanging();
					this._StyleID = value;
					this.SendPropertyChanged("StyleID");
					this.OnStyleIDChanged();
				}
			}
		}
		
		[Association(Name="Style_UsersPreferredStyle", Storage="_Style", ThisKey="StyleID", IsForeignKey=true)]
		public Style Style
		{
			get
			{
				return this._Style.Entity;
			}
			set
			{
				Style previousValue = this._Style.Entity;
				if (((previousValue != value) 
							|| (this._Style.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Style.Entity = null;
						previousValue.UsersPreferredStyles.Remove(this);
					}
					this._Style.Entity = value;
					if ((value != null))
					{
						value.UsersPreferredStyles.Add(this);
						this._StyleID = value.ID;
					}
					else
					{
						this._StyleID = default(System.Guid);
					}
					this.SendPropertyChanged("Style");
				}
			}
		}
		
		[Association(Name="User_UsersPreferredStyle", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersPreferredStyles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersPreferredStyles.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
